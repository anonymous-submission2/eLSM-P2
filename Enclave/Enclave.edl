/*
 *Copyright 2019 FSSL (full-stack security lab) at Syracuse University
 *
 *Licensed under the Apache License, Version 2.0 (the "License");
 *you may not use this file except in compliance with the License.
 *You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *Unless required by applicable law or agreed to in writing, software
 *distributed under the License is distributed on an "AS IS" BASIS,
 *WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *See the License for the specific language governing permissions and
 *limitations under the License.
 */

/* Enclave.edl - Top EDL file. */
enclave {
  //from "sgx_tstdc.edl" import *;    
  from "sgx_tprotected_fs.edl" import *;
  include "user_types.h" /* buffer_t */

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */

    trusted {
      public void ecall_test(void);
      public void ecall_ycsb_open(void);
      public void ecall_bench(void);
      public void ecall_writes(int writes, int total);
      public void ecall_reads(int reads, int total);
      public void ecall_getproperty();
      public void ecall_startthread(long ls, int type);
      public void ecall_open(void);
      public void ecall_compact();
      public void ecall_writetest(long key, long value);
      public void ecall_fileiotest();
      public void ecall_put([in,size=ksize] const char *kdata, int ksize, [in,size=vsize] const char *vdata, int vsize);
      public void ecall_get([in,size=ksize] char *kdata, int ksize, [out,size=400] char *vdata);
    };
  /* 
   * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
   *  [in]: copy the string buffer to App outside.
   *  [string]: specifies 'str' is a NULL terminated buffer.
   */
  untrusted {
    void ocall_print_string([in, string] const char *str);
    void ocall_file_exists([in, string] const char *str, [out] int *res);
    void ocall_create_dir([in,string] const char *str);
    void ocall_delete_file([in,string] const char *str);
    void ocall_rename_file([in,string] const char *str1,[in,string] const char *str2);
    void ocall_fopen([in,string]const char *fname, [in,string] const char *mode, [out] long *res);
    void ocall_getchildren([in,string]const char *fname, [out] long* res, [out] int* size);
    void ocall_checkchildren(long res, int i, [out,size=100] char* filename);
    void ocall_fwrite([in,size=ncount]const char *data, int psize, int ncount, long f, [out] int *res);
    void ocall_fread([out,size=ncount] char *data, int psize, int ncount, long f, [out] int *res);
    void ocall_fread_outside(long data, int psize, int ncount, long f, [out] int *res);
    void ocall_fflush(long f, [out] int *res);
    void ocall_fclose(long f, [out] int *res);
    void ocall_feof(long f, [out] int *res);
    void ocall_fseek(long f, int offset,[out] int *res);
    void ocall_pthread_create(int type, long ls);
    void ocall_get_filesize([in,string] const char* str, [out] uint64_t *res);
    void ocall_allocate_specific([out] long  *res, int size);
    void ocall_delete(long mem);
    void ocall_allocate([out] long  *res, int flag);
    void ocall_allocate3([out] long  *res,[out] long  *res1,[out] long  *res2);
  };

};
